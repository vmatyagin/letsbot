import logging

from aiogram import Router, F
from aiogram.types import Message, LinkPreviewOptions
from aiogram.filters import MagicData
from aiogram.fsm.context import FSMContext
from filters import PrivateFilter
from person import Person, insert_location, update_person
from config import MAP_URL
from utils import (
    status_keyboard_markup,
    get_status_from_message,
    common_keyboard_markup,
)
from states import States
from aiogram.enums import ParseMode

logger = logging.getLogger(__name__)

router = Router(name=__name__)
router.message.filter(PrivateFilter(), MagicData(F.is_activated == False))


@router.message(States.wait_for_status)
async def process_register_status(
    message: Message, person: Person, state: FSMContext
) -> None:
    new_status = get_status_from_message(message=message)

    if not new_status:
        return

    update_person(id=person["id"], field="family_status", value=new_status)
    update_person(id=person["id"], field="is_activated", value="1")

    await state.clear()

    await message.answer(
        f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ!</b> –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å <a href='{MAP_URL}'>—Å—Ä–∞–∑—É –Ω–∞ –∫–∞—Ä—Ç–µ</a>, –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç ¬´–û–±–æ –º–Ω–µ¬ª –≤ –º–µ–Ω—é.",
        link_preview_options=LinkPreviewOptions(
            is_disabled=True,
        ),
        reply_markup=common_keyboard_markup,
        parse_mode=ParseMode.HTML,
    )


@router.message(States.wait_for_about)
async def process_register_about(
    message: Message, person: Person, state: FSMContext
) -> None:
    if not message.text or message.text and len(message.text) < 1:
        return

    update_person(id=person["id"], field="about", value=message.text[:250])
    await state.set_state(States.wait_for_status)

    await message.answer(
        "‚ô•Ô∏è <b>–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å.</b> –ù–µ —Å–µ—Ä—Ñ–∏–Ω–≥–æ–º –µ–¥–∏–Ω—ã–º :) –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=status_keyboard_markup,
        parse_mode=ParseMode.HTML,
    )


@router.message(States.wait_for_location)
async def process_register_location(
    message: Message, person: Person, state: FSMContext
) -> None:
    if not message.location:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        return

    insert_location(
        user_pk=person["id"],
        name="",
        latitude=message.location.latitude,
        longitude=message.location.longitude,
    )

    await message.answer(
        "üñ• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ.</b> –ù–∞–ø–∏—à–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –∏ –Ω–µ –æ—á–µ–Ω—å –≤—Ä–µ–º—è.",
        parse_mode=ParseMode.HTML,
    )
    await state.set_state(States.wait_for_about)


@router.message()
async def unhandled(message: Message, state: FSMContext):
    logger.debug(f"unhandled, {__name__}")
    current_state = await state.get_state()

    if current_state == None and message.from_user and not message.from_user.is_bot:
        name = message.from_user.first_name
        await message.answer(
            f"""–ê–ª–æ—Ö–∞, {name} ü§ô\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É <a href="{MAP_URL}">–ª–µ—Ç—Å—Å–µ—Ä—Ñ–µ—Ä–æ–≤</a> –∏ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ. –ù–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–µ–º–ø–∞–º–∏, —Å–µ—Ä—Ñ–µ—Ä—ã.\n\n<b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É:</b>\n\n<b>üìç–ª–æ–∫–∞—Ü–∏—é</b>, —Ö–æ—Ç—è –±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é ‚Äî —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏–º, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º.\n\n<b>üñ•  —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è</b> –≤ —Ä–∞–±–æ—á–µ–µ –∏ –Ω–µ –æ—á–µ–Ω—å –≤—Ä–µ–º—è ‚Äî —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏–ª–∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n<b>‚ô•Ô∏è —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å</b> ‚Äî –Ω—É –∞ –≤–¥—Ä—É–≥, –≤—Å—è–∫–æ–µ –±—ã–≤–∞–µ—Ç :)\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–µ—Ä—Ñ–µ—Ä–æ–º –∏–∑ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è ü§ç""",
            link_preview_options=LinkPreviewOptions(is_disabled=True),
            parse_mode=ParseMode.HTML,
        )
        await message.answer(
            "üìç <b>–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é.</b> –ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∑–∂–µ –µ—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å\n\n<i>–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</i>",
            parse_mode=ParseMode.HTML,
        )
        await state.set_state(States.wait_for_location)
