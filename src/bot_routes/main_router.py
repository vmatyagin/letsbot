import logging
from aiogram import F, Router
from aiogram.filters import MagicData
from aiogram.types import (
    Message,
    CallbackQuery,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from filters import PrivateFilter
from person import (
    Person,
    PersonStatus,
    PersonStatusLangs,
    delete_location_by_id,
    get_location_by_id,
    get_user_locations,
    insert_location,
    update_person,
)
from utils import (
    status_keyboard_markup,
    get_status_from_message,
    common_keyboard_markup,
    inline_get_map_markup,
    change_me_markup,
    no_location_markup,
)
from states import States

logger = logging.getLogger(__name__)


router = Router(name=__name__)
router.message.filter(PrivateFilter(), MagicData(F.is_activated == True))


@router.message(States.wait_for_name)
async def process_name(message: Message, person: Person, state: FSMContext) -> None:
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")
        return

    await state.clear()
    update_person(id=person["id"], field="name", value=message.text)
    await message.answer(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=common_keyboard_markup,
    )


@router.message(States.wait_for_about)
async def process_about(message: Message, person: Person, state: FSMContext) -> None:
    if not message.text:
        return
    await state.clear()
    update_person(id=person["id"], field="about", value=message.text)

    await message.answer(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=common_keyboard_markup,
    )


@router.message(States.wait_for_status)
async def process_status(message: Message, person: Person, state: FSMContext) -> None:
    new_status = get_status_from_message(message=message)

    if not new_status:
        return

    await state.clear()

    update_person(id=person["id"], field="family_status", value=new_status)

    await message.answer(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=common_keyboard_markup,
    )


@router.callback_query(
    lambda c: isinstance(c.data, str) and c.data.startswith("edit-location:")
)
async def handle_location_click(query: CallbackQuery):
    if not query.data or not query.bot or not query.message:
        return

    id = query.data.replace("edit-location:", "")

    if not id:
        return

    location = get_location_by_id(int(id))

    if not location:
        return

    location_name = location["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    builder = InlineKeyboardBuilder()

    builder.button(
        text="–£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete-location:{location['id']}",
    )

    await query.bot.edit_message_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: {location_name}",
        query.from_user.id,
        query.message.message_id,
        reply_markup=builder.as_markup(),
    )

    await query.bot.send_location(
        chat_id=query.message.chat.id,
        latitude=location["latitude"],
        longitude=location["longitude"],
    )


@router.callback_query(
    lambda c: isinstance(c.data, str) and c.data.startswith("delete-location:")
)
async def handle_location_delete(query: CallbackQuery):
    if not query.data or not query.bot or not query.message:
        return

    id = query.data.replace("delete-location:", "")

    if not id:
        return

    delete_location_by_id(int(id))
    await query.bot.edit_message_text(
        f"–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞",
        query.from_user.id,
        query.message.message_id,
        reply_markup=None,
    )


@router.message(States.wait_for_location_name)
async def process_location_name(
    message: Message, person: Person, state: FSMContext
) -> None:
    if not message.text or len(message.text) < 2:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return

    await state.set_data({"name": message.text})
    await state.set_state(States.wait_for_location)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–µ —Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–µ–π –ª–æ–∫–∞—Ü–∏–µ–π\n\n<i>–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</i>"
    )


@router.message(States.wait_for_location)
async def process_location(message: Message, person: Person, state: FSMContext) -> None:
    data = await state.get_data()

    if not message.location:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        return

    insert_location(
        user_pk=person["id"],
        name=data.get("name", ""),
        latitude=message.location.latitude,
        longitude=message.location.longitude,
    )

    await state.clear()
    await message.answer(f"–û–∫! –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


# –ö–û–õ–ë–≠–ö–ò –ù–ê –ö–ù–û–ü–ö–ò –í –ò–ó–ú–ï–ù–ï–ù–ò–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò


@router.callback_query(
    lambda c: isinstance(c.data, str) and c.data.startswith("edit-me:")
)
async def handle_change_me(query: CallbackQuery, state: FSMContext):
    if not query.data or not query.bot or not query.message:
        return

    id = query.data.replace("edit-me:", "")

    if not id:
        return

    await query.bot.delete_message(
        query.from_user.id,
        query.message.message_id,
    )

    text: str = ""
    markup = None

    if id == "name":
        text = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ –∏–º—è."
        await state.set_state(States.wait_for_name)

    if id == "about":
        text = "–ù–∞–ø–∏—à–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –∏ –Ω–µ –æ—á–µ–Ω—å –≤—Ä–µ–º—è."
        await state.set_state(States.wait_for_about)

    if id == "status":
        text = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å."
        await state.set_state(States.wait_for_status)
        markup = status_keyboard_markup

    if id == "location":
        text = "–î–∞–≤–∞–π –æ–±–∑–æ–≤–µ–º –∫–∞–∫-–Ω–∏–±—É–¥—å –ª–æ–∫–∞—Ü–∏—é? –ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        await state.set_state(States.wait_for_location_name)

    await query.bot.send_message(
        query.from_user.id,
        text,
        reply_markup=markup,
    )


# –†–ï–ê–ö–¶–ò–ò –ù–ê –ö–ù–û–ü–ö–ò


@router.message(F.text.contains("–û–±–æ –º–Ω–µ"))
async def get_me(message: Message, person: Person, state: FSMContext):
    name = person.get("name", "")
    status = PersonStatusLangs.get(
        PersonStatus(person.get("family_status", PersonStatus.UNSET))
    )
    about = person.get("about", "")

    answer = f"–ò–º—è ‚Äî {name}\n–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å ‚Äî {status}\n–û —Ç–µ–±–µ ‚Äî {about}"

    if person["is_admin"]:
        answer += "\n\n –ê –µ—â–µ —Ç—ã –∞–¥–º–∏–Ω ‚ù§Ô∏è"

    await message.answer(
        answer,
        reply_markup=common_keyboard_markup,
    )


@router.message(F.text.contains("–ö–∞—Ä—Ç–∞"))
async def get_map(message: Message):
    await message.answer("–ö–∞—Ä—Ç–∞ –ª–µ—Ç—Å–µ—Ä—Ñ–µ—Ä–æ–≤", reply_markup=inline_get_map_markup)


@router.message(F.text.contains("–ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏"))
async def get_locations(message: Message, person: Person, state: FSMContext):
    user_locations = get_user_locations(person["id"])

    if not len(user_locations):
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–π", reply_markup=no_location_markup)
        return

    builder = InlineKeyboardBuilder()

    if len(user_locations) < 3:
        builder.button(
            text="üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
            callback_data=f"edit-me:location",
        )

    for location in user_locations:
        builder.button(
            text=location["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            callback_data=f"edit-location:{location['id']}",
        )

    builder.adjust(3)

    await message.answer("–¢–≤–æ–∏ –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=builder.as_markup())


@router.message(F.text.contains("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))
async def change_me(message: Message, person: Person, state: FSMContext):
    await state.clear()
    await message.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=change_me_markup)


#


@router.message()
async def unhandled(message: Message, state: FSMContext):
    logger.debug(f"unhandled, {__name__}")
    await message.answer(
        f"–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è",
        reply_markup=common_keyboard_markup,
    )
