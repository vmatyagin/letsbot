"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""

import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from config import BASE_WEBHOOK_URL, TELEGRAM_BOT_TOKEN, WEBHOOK_PATH, WEBHOOK_SECRET
from middlewares import AccessMiddleware
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardRemove,
    BotCommand,
    CallbackQuery,
    WebhookInfo,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardMarkup, InlineKeyboardBuilder
from middlewares import AccessMiddleware
from filters import PrivateFilter
from person import (
    Person,
    PersonStatusLangs,
    update_person,
    insert_location,
    PersonStatus,
    get_user_locations,
    get_location_by_id,
    delete_location_by_id,
)

logger = logging.getLogger(__name__)

dp = Dispatcher()
bot = Bot(TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)

dp.message.middleware(AccessMiddleware())


class Form(StatesGroup):
    name = State()
    about = State()
    status = State()
    location = State()
    new_location = State()


@dp.message(PrivateFilter(), CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —Å–µ—Ä—Ñ–µ—Ä!!\n \n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–µ–±–µ, –≤–≤–µ–¥–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
        "/name, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏\n"
        "/location, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ \n"
        "/status, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ \n"
        "/about, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ \n\n"
        "/me, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
    )


@dp.message(PrivateFilter(), Command(commands=["me"]))
async def get_me(message: Message, person: Person, state: FSMContext):
    await state.clear()

    name = person.get("name", "")
    status = PersonStatusLangs.get(
        PersonStatus(person.get("family_status", PersonStatus.UNSET))
    )
    about = person.get("about", "")

    answer = f"–ò–º—è -- {name}\n–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å -- {status}\n–û —Ç–µ–±–µ -- {about}"

    if person["is_admin"]:
        answer += "\n–¢—ã –∞–¥–º–∏–Ω"

    await message.answer(answer, reply_markup=ReplyKeyboardRemove())


@dp.message(PrivateFilter(), Command(commands=["name"]))
async def change_name(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.name)

    await message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è")


@dp.message(PrivateFilter(), Form.name)
async def process_name(message: Message, person: Person, state: FSMContext) -> None:
    if len(message.text.strip()) < 2:
        await message.answer(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")
        return

    await state.clear()
    update_person(id=person["id"], field="name", value=message.text)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@dp.message(PrivateFilter(), Command(commands=["about"]))
async def change_name(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.about)

    await message.answer(
        "–ü—Ä–∏—à–ª–∏ –≤ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"
    )


@dp.message(PrivateFilter(), Form.about)
async def process_name(message: Message, person: Person, state: FSMContext) -> None:
    await state.clear()
    update_person(id=person["id"], field="about", value=message.text)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@dp.message(PrivateFilter(), Command(commands=["new_location"]))
async def change_name(message: Message, state: FSMContext):
    await state.clear()

    await state.set_state(Form.new_location)

    await message.answer("–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–∫-–Ω–∏–±—É–¥—å –æ–±–∑–æ–≤–∏ —Ç–æ—á–∫—É)")


async def create_status_keyboard(message: Message, text: str):

    keyboard_list = []
    for status in PersonStatusLangs:
        keyboard_list.append([KeyboardButton(text=PersonStatusLangs[status])])

    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_list, resize_keyboard=True, one_time_keyboard=True
    )

    await message.answer(
        text,
        reply_markup=keyboard,
    )


@dp.message(PrivateFilter(), Command(commands=["status"]))
async def change_status(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.status)

    await create_status_keyboard(message, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å")


@dp.message(PrivateFilter(), Form.status)
async def process_status(message: Message, person: Person, state: FSMContext) -> None:

    new_status: str | None = None
    for status, text in PersonStatusLangs.items():
        if text == message.text:
            new_status = status.value
            break

    if not new_status:
        await create_status_keyboard(message, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å")
        return

    await state.clear()

    update_person(id=person["id"], field="family_status", value=new_status)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())


@dp.message(PrivateFilter(), Command(commands=["location"]))
async def location(message: Message, person: Person, state: FSMContext):
    await state.clear()

    user_locations = get_user_locations(person["id"])

    if not len(user_locations):
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–π. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞–µ—Ç –µ—ë, –Ω–∞–ø–∏—à–∏ /new_location"
        )
        return

    builder = InlineKeyboardBuilder()

    for location in user_locations:
        builder.button(
            text=location["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            callback_data=f"edit-location:{location['id']}",
        )

    builder.adjust(3, 3)

    await message.answer("–¢–≤–æ–∏ –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=builder.as_markup())


@dp.callback_query(
    lambda c: isinstance(c.data, str) and c.data.startswith("edit-location:")
)
async def handle_location_click(query: CallbackQuery):

    id = query.data.replace("edit-location:", "")

    if not id:
        return

    location = get_location_by_id(int(id))
    location_name = location["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    builder = InlineKeyboardBuilder()

    builder.button(
        text="–£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete-location:{location['id']}",
    )

    await bot.edit_message_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: {location_name}",
        query.from_user.id,
        query.message.message_id,
        reply_markup=builder.as_markup(),
    )

    await bot.send_location(
        chat_id=query.message.chat.id,
        latitude=location["latitude"],
        longitude=location["longitude"],
    )


@dp.callback_query(
    lambda c: isinstance(c.data, str) and c.data.startswith("delete-location:")
)
async def handle_location_delete(query: CallbackQuery):

    id = query.data.replace("delete-location:", "")

    if not id:
        return

    delete_location_by_id(int(id))

    await bot.edit_message_text(
        f"–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞",
        query.from_user.id,
        query.message.message_id,
        reply_markup=None,
    )


@dp.message(PrivateFilter(), Form.new_location)
async def process_location(message: Message, person: Person, state: FSMContext) -> None:
    if len(message.text) < 2:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return

    await state.set_data({"name": message.text})
    await state.set_state(Form.location)

    await message.answer(f"–û–∫! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ª–æ–∫–∞—Ü–∏—é")


@dp.message(PrivateFilter(), Form.location)
async def process_location(message: Message, person: Person, state: FSMContext) -> None:
    if not message.location:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        return

    data = await state.get_data()
    await state.clear()

    insert_location(
        user_pk=person["id"],
        name=data.get("name", ""),
        latitude=message.location.latitude,
        longitude=message.location.longitude,
    )

    await message.answer(f"–û–∫! –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@dp.message(PrivateFilter(), Command(commands=["clear"]))
async def clear(message: Message, state: FSMContext):
    await state.clear()

    await message.answer("–û—á–∏—â–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())


async def set_webhook(bot: Bot) -> None:
    # Check and set webhook for Telegram
    # await bot.delete_webhook(True)
    # await dp.start_polling(bot)
    async def check_webhook() -> WebhookInfo | None:
        try:
            webhook_info = await bot.get_webhook_info()
            return webhook_info
        except Exception as e:
            logger.error(f"Can't get webhook info - {e}")
            return

    current_webhook_info = await check_webhook()
    logger.debug(f"Current bot info: {current_webhook_info}")
    try:
        await bot.set_webhook(
            f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}",
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=current_webhook_info.pending_update_count > 0,
        )

        logger.debug(f"Updated bot info: {await check_webhook()}")
    except Exception as e:
        logger.error(f"Can't set webhook - {e}")


async def set_bot_commands_menu(bot: Bot) -> None:
    commands = [
        BotCommand(command="/me", description="–û —Ç–µ–±–µ"),
        BotCommand(command="/start", description="üìã –ú–µ–Ω—é"),
        BotCommand(command="/location", description="üìç –õ–æ–∫–∞—Ü–∏–∏"),
        BotCommand(command="/new_location", description="–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"),
        BotCommand(command="/name", description="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"),
        BotCommand(command="/status", description="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"),
        BotCommand(command="/about", description="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"),
    ]
    try:
        await bot.set_my_commands(commands)
    except Exception as e:
        logger.error(f"Can't set commands - {e}")


async def start_telegram():
    await set_webhook(bot)
    await set_bot_commands_menu(bot)
